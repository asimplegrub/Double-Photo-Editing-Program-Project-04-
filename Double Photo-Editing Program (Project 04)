int counter = 0;

final color RED = color(255, 0, 0);

static final String[] IMG_EXTS = {
  ".gif", ".png", ".jpg"
};
String filter="";



//Global state variables to refer to:
//  the one or two original images after they have been scaled down.
PImage imgOrig01, imgOrig02;
//  the result of one of the modification options
PImage imgMod;



//Do not alter the setup() function
void setup() {
  size(800, 400);

  for (String s : IMG_EXTS) {
    filter+=("*"+s+";");
  }
}



//Do not alter the draw() function
void draw() {
  if (imgMod == null) {
    drawOriginals();
  } else {
    drawResult();
  }
}



//Do not alter the drawOriginals() function
void drawOriginals() {
  background(192);
  if (imgOrig01 != null) {
    imageMode(CORNER);
    image(imgOrig01, 0, 0);
  }  
  if (imgOrig02 != null) {
    imageMode(CORNER);
    image(imgOrig02, width/2, 0);
  }
}


//Do not alter the drawResult() function
void drawResult() {
  background(192);
  if (imgMod != null) {
    imageMode(CENTER);
    image(imgMod, width/2, height/2);
  }
}



//Do not alter the scaleThisImage() function
void scaleThisImage(PImage imgToScale) {
  if (imgToScale.width < imgToScale.height) {
    imgToScale.resize(0, height);
  } else {  
    imgToScale.resize(width/2, 0);
  }
}

//Example HSB-based manipulation
void oversaturate() {
  pushStyle();
  colorMode(HSB, 360, 100, 100);
  imgMod = createImage(imgOrig01.width, imgOrig01.height, imgOrig01.format);
  for (int x=0; x<imgOrig01.width; x++) {
    for (int y=0; y<imgOrig01.height; y++) {
      color colorAtXY = imgOrig01.get(x, y);
      color colorToXY = color(hue(colorAtXY), saturation(colorAtXY)*2, brightness(colorAtXY));
      imgMod.set(x, y, colorToXY);
    }
  }
  popStyle();
}


//THESE ARE THE ONES THAT YOU NEED TO IMPLEMENT
//   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv


void rotate180() {
  //Remember, image being rotated in currently referred to by imgOrig01 but you will
  //  need to create an image object for imgMod to refer to at the end.  You should
  //  not be altering the image to which imgOrig01 refers.

  //HINT: Think about how flipping along an axis only needed one of x or y to change but 
  //      how with rotating 180 degrees they both change.
  imgMod = imgOrig01.copy();
  PImage tempimg = createImage(imgMod.width, imgMod.height, imgMod.format);
  for (int x=0; x<imgMod.width; x++) {
    for (int y=0; y<imgMod.height; y++) {
      color colorAtXY = imgMod.get(x, y);
      //int newX = x;
      int newX = (imgMod.width-1) - x;
      //int newY = y;
      int newY = (imgMod.height-1) - y;
      tempimg.set(newX, newY, colorAtXY); //ISSUE HERE??
    }
  }
  imgMod = tempimg;
}


void difference() {
  //Remember, the two images are guaranteed to be the same size, so make
  //  use of that as you think about your nested loops and what should be
  //  tested and done within them.

  //HINT: You will need to create an image object for imgMod to refer to
  //      at the end.
  imgMod = imgOrig01.copy();
  PImage tempimg = createImage(imgMod.width, imgMod.height, imgMod.format);
  for (int x=0; x<imgMod.width; x++) {
    for (int y=0; y<imgMod.height; y++) {
      color colorAtXY01 = imgOrig01.get(x, y);
      color colorAtXY02 = imgOrig02.get(x, y);
      if (colorAtXY01 != colorAtXY02) { //differences are red
        color colorToXY = color(255, 0, 0);
        tempimg.set(x, y, colorToXY);
      } else { //everything else remains the same
        color colorToXY = colorAtXY01;
        tempimg.set(x, y, colorToXY);
      } 
    }//inside inner for loop
  }//insde outer for loop
  imgMod = tempimg;
}


void interleave() { //the images have to be the same size
  //Remember, the two images are guaranteed to be the same size, so make
  //  use of that as you think about your nested loops and what should be
  //  tested and done within them.

  //HINT: You will need to create an image object for imgMod to refer to
  //      at the end, and it will be twice as long as the originals, though
  //      of the same height as the originals.
  
  imgMod = imgOrig01.copy();
  //PImage tempimg = createImage(imgMod.width, imgMod.height, imgMod.format);
  PImage tempimg = createImage(width, height, imgMod.format);
  for (int x=0; x<imgMod.width; x++) {
    for (int y=0; y<imgMod.height; y++) {
      color colorAtXY01 = imgOrig01.get(x, y);
      color colorAtXY02 = imgOrig02.get(x, y);
      if (x%2==0) {
        color colorToXY = colorAtXY01;
        tempimg.set((x*2), y, colorToXY);
      } else {
        color colorToXY = colorAtXY02;
        tempimg.set((x*2), y, colorToXY); 
      }
        //tempimg.set((x*2), y, colorAtXY02); 
    }//inside inner for loop
  }//insde outer for loop
  imgMod = tempimg;
  print('*');
}





void chromakey() {
  //We have provided some starter code that will preserve and then restore
  //  the state's style, and that changes the color mode since we need it to
  //  be in HSB mode so that we can ask a color about its hue, saturation, 
  //  and brightness.

  //HINT #1: Processing has functions hue(c), saturation(c), and brightness(c)
  //         where each takes a color while in HSB mode and turns the numeric 
  //         value for that aspect of it.  They take a color as inpt and return
  //         a floating point number.
  //                
  //HINT #2: You might find it useful to write a helper function such as
  //                boolean blueChroma(color c)
  //         to make it easier to read and tweak your code. 

  pushStyle();
  colorMode(HSB, 360, 100, 100);

  imgMod = imgOrig01.copy();
  PImage tempimg = createImage(imgMod.width, imgMod.height, imgMod.format);
  for (int x=0; x<imgMod.width; x++) {
    for (int y=0; y<imgMod.height; y++) {
      color colorAtXY01 = imgOrig01.get(x, y);
      color colorAtXY02 = imgOrig02.get(x, y);
      
      colorMode(RGB, 255,255,255);
      float redValue = red(colorAtXY01);  // Get red in 'colorAtXY01'
      int redValueInt = int(redValue);
      
      float greenValue = green(colorAtXY01);  // Get green in 'colorAtXY01'
      int greenValueInt = int(greenValue);
      
      float blueValue = blue(colorAtXY01);  // Get blue in 'colorAtXY01'
      int blueValueInt = int(blueValue);

      colorMode(RGB, 255, 255, 255);
      color c = color(redValueInt, greenValueInt, blueValueInt);
      colorMode(HSB, 360, 100, 100);
      float hueValue = hue(c);
      float saturationValue = saturation(c);
      float brightnessValue = brightness(c); 
 
 
/*
To determine if a pixel's color is chroma key blue, 
consider that its hue would be between 210° and 240° 
and it would have a high saturation level (at least 50%) and wouldn't be too dark 
(a brightness threshold of 25% would be reasonable).
*/
      if ((hueValue > 210 && hueValue < 240) && (saturationValue >=50) && (brightnessValue >=25)) {
        color colorToXY = colorAtXY02;
        tempimg.set(x, y, colorToXY);
        //print('*');
        //print(hueValue);
      } else {
        color colorToXY = colorAtXY01;
        tempimg.set(x, y, colorToXY); 
        //print('*');
        //print(hueValue);
      }
    }//end of inner for loop
  }//end of outer for loop
  imgMod = tempimg;
  popStyle();
}

//Might be a useful hlper funtion to implement...
//boolean blueChroma(color c) {
  
//}



//DO NOT MODIFY ANY CODE BELOW THIS LINE
void keyPressed(KeyEvent e) {

  if (e.getKey() == 'r') {
    imgMod = null;
  }

  if (e.getKey() == 'k') { //load image 1
    selectInput("Select a first image file:", "makeSelectedFileImage01", new File(filter.substring(0, filter.length()-1)));
  } else if (e.getKey() == 'l') { //load image 2
    selectInput("Select a second image file:", "makeSelectedFileImage02", new File(filter.substring(0, filter.length()-1)));
  }


  if (imgOrig01 == null) return;

  if (e.getKey() == '0') { //double the image's saturation levels
    oversaturate();
  }

  if (e.getKey() == 's') {
    imgMod.save("Image01"+counter+".png");
    counter++;
  }


  if (e.getKey() == '1') { //rotate the image 180 degrees
    rotate180();
  }


  if (imgOrig02 == null) return;

  if ( (imgOrig01.width != imgOrig02.width) || (imgOrig01.height != imgOrig02.height) ) return;


  if (e.getKey() == '2') { //difference the images
    difference();
  }

  if (e.getKey() == '3') { //interleave the images
    interleave();
  }

  if (e.getKey() == '4') { //have image 2 appear "through" chromakey in image 1
    chromakey();
  }
}



void makeSelectedFileImage01(File selection) {
  if (selection == null) {
    println("Window was closed or the user hit cancel.");
  } else {
    boolean valid = false;
    String theFile = selection.getAbsolutePath();
    String theSuffix = theFile.substring(theFile.length()-4);
    for (int i=0; i<IMG_EXTS.length; i++) {
      if (theSuffix.equals(IMG_EXTS[i])) {
        valid = true;
      }
    }
    if (valid) {
      imgOrig01 = loadImage(theFile);
      scaleThisImage(imgOrig01);
    }
  }
}


void makeSelectedFileImage02(File selection) {
  if (selection == null) {
    println("Window was closed or the user hit cancel.");
  } else {
    boolean valid = false;
    String theFile = selection.getAbsolutePath();
    String theSuffix = theFile.substring(theFile.length()-4);
    for (int i=0; i<IMG_EXTS.length; i++) {
      if (theSuffix.equals(IMG_EXTS[i])) {
        valid = true;
      }
    }
    if (valid) {
      imgOrig02 = loadImage(theFile);
      scaleThisImage(imgOrig02);
    }
  }
}
